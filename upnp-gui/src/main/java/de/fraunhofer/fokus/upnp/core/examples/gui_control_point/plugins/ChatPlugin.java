/**
* 
* Copyright (C) 2004-2008 FhG Fokus
*
* This file is part of the FhG Fokus UPnP stack - an open source UPnP implementation
* with some additional features
*
* You can redistribute the FhG Fokus UPnP stack and/or modify it
* under the terms of the GNU General Public License Version 3 as published by
* the Free Software Foundation.
*
* For a license to use the FhG Fokus UPnP stack software under conditions
* other than those described here, or to purchase support for this
* software, please contact Fraunhofer FOKUS by e-mail at the following
* addresses:
*   upnpstack@fokus.fraunhofer.de
*
* The FhG Fokus UPnP stack is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, see <http://www.gnu.org/licenses/>
* or write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
*
*/
package de.fraunhofer.fokus.upnp.core.examples.gui_control_point.plugins;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.event.ActionEvent;

import de.fraunhofer.fokus.upnp.core.DeviceConstant;
import de.fraunhofer.fokus.upnp.core.control_point.CPAction;
import de.fraunhofer.fokus.upnp.core.control_point.CPStateVariable;
import de.fraunhofer.fokus.upnp.util.ThreadHelper;
import de.fraunhofer.fokus.upnp.util.exceptions.ActionFailedException;
import de.fraunhofer.fokus.upnp.util.swing.ButtonConstants;
import de.fraunhofer.fokus.upnp.util.swing.SmoothButton;

/**
 * This plugin is used for chat services.
 * 
 * @author Alexander Koenig
 */
public class ChatPlugin extends BaseCPServicePlugin
{

  private static final long serialVersionUID   = 1L;

  public static String      PLUGIN_TYPE        = DeviceConstant.CHAT_SERVICE_TYPE;

  private SmoothButton      sendButton;

  private int               lastRequestedIndex = -1;

  private int               messageCount       = 0;

  private boolean           terminateThread    = false;

  private boolean           terminated         = false;

  public void initPluginComponents()
  {
    super.initPluginComponents();

    initComponents();

    sendButton = new SmoothButton(new Dimension(100, ButtonConstants.BUTTON_HEIGHT), 12, "Senden", "SendText");

    sendButton.addActionListener(this);
    jNameTextField.setText("Unbekannt");

    setBackground(ButtonConstants.BACKGROUND_COLOR);

    // initialize panel layout
    updateLayout();
  }

  /*
   * (non-Javadoc)
   * 
   * @see de.fhg.fokus.magic.upnp.control_point.plugins.BasePlugin#runPlugin()
   */
  public void startPlugin()
  {
    super.startPlugin();
    try
    {
      messageCount = (int)service.getCPStateVariable("MessageCount").getNumericValue();
    } catch (Exception e)
    {
    }
    Thread thread = new Thread(this);
    thread.setName("ChatPlugin");
    thread.start();
  }

  /*
   * (non-Javadoc)
   * 
   * @see de.fhg.fokus.magic.upnp.control_point.plugins.BasePlugin#getPluginType()
   */
  public String getPluginType()
  {
    return PLUGIN_TYPE;
  }

  /*
   * (non-Javadoc)
   * 
   * @see de.fhg.fokus.magic.upnp.event.ICPStateVariableListener#stateVariableChanged(de.fhg.fokus.magic.upnp.CPStateVariable)
   */
  public void stateVariableChanged(CPStateVariable stateVariable)
  {
    if (service.getCPStateVariable("MessageCount") == stateVariable)
    {
      try
      {
        messageCount = (int)stateVariable.getNumericValue();
      } catch (Exception ex)
      {
      }
    }
  }

  /*
   * (non-Javadoc)
   * 
   * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
   */
  public void actionPerformed(ActionEvent e)
  {
    if (jEnterTextField.getText() != null && jEnterTextField.getText().length() > 0 &&
      sendButton.getID().equals(e.getActionCommand()))
    {
      sendMessage();
    }
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  private void initComponents()// GEN-BEGIN:initComponents
  {
    java.awt.GridBagConstraints gridBagConstraints;

    jTextArea = new javax.swing.JTextArea();
    jDividerPanel = new javax.swing.JPanel();
    jEnterTextField = new javax.swing.JTextField();
    jNameTextField = new javax.swing.JTextField();
    jLabel1 = new javax.swing.JLabel();

    setLayout(new java.awt.GridBagLayout());

    setBackground(new java.awt.Color(204, 204, 255));
    jTextArea.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    add(jTextArea, gridBagConstraints);

    jDividerPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
    jDividerPanel.setPreferredSize(new java.awt.Dimension(16, 4));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    add(jDividerPanel, gridBagConstraints);

    jEnterTextField.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jEnterTextFieldActionPerformed(evt);
      }
    });
    jEnterTextField.addKeyListener(new java.awt.event.KeyAdapter()
    {
      public void keyPressed(java.awt.event.KeyEvent evt)
      {
        jEnterTextFieldKeyPressed(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    add(jEnterTextField, gridBagConstraints);

    jNameTextField.setMinimumSize(new java.awt.Dimension(100, 19));
    jNameTextField.setPreferredSize(new java.awt.Dimension(100, 19));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    add(jNameTextField, gridBagConstraints);

    jLabel1.setFont(new java.awt.Font("SansSerif", 0, 12));
    jLabel1.setText("sagt:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    add(jLabel1, gridBagConstraints);

  }// GEN-END:initComponents

  private void jEnterTextFieldActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_jEnterTextFieldActionPerformed
  {// GEN-HEADEREND:event_jEnterTextFieldActionPerformed

  }// GEN-LAST:event_jEnterTextFieldActionPerformed

  private void jEnterTextFieldKeyPressed(java.awt.event.KeyEvent evt)
  {// GEN-FIRST:event_jEnterTextFieldKeyPressed
  // System.out.println("Key code is " + evt.getKeyCode());
    if (evt.getKeyCode() == 10)
    {
      sendMessage();
    }
  }// GEN-LAST:event_jEnterTextFieldKeyPressed

  /** Sends a message */
  private void sendMessage()
  {
    CPAction action = service.getCPAction("AddMessage");
    if (action != null)
    {
      try
      {
        action.getArgument("Name").setValue(jNameTextField.getText());
        action.getArgument("Message").setValue(jEnterTextField.getText());

        controlPoint.invokeAction(action);

        jEnterTextField.setText("");
      } catch (ActionFailedException afe)
      {
        System.out.println("An error occured:" + afe.getMessage());
      } catch (Exception ex)
      {
        System.out.println("An error occured:" + ex.getMessage());
      }
    }

  }

  /** Redraws the layout of the plugin */
  private void updateLayout()
  {
    GridBagConstraints gridBagConstraints;

    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = GridBagConstraints.BOTH;
    gridBagConstraints.insets = new Insets(5, 5, 5, 5);
    gridBagConstraints.fill = GridBagConstraints.BOTH;
    add(sendButton, gridBagConstraints);

    repaint();
    validateTree();
  }

  /*
   * (non-Javadoc)
   * 
   * @see java.lang.Runnable#run()
   */
  public void run()
  {
    while (!terminateThread)
    {
      // request outstanding messages
      if (messageCount > 0 && messageCount > lastRequestedIndex + 1)
      {
        // remove older messages

        // do not request more than 20 messages at once
        if (lastRequestedIndex < messageCount - 20)
        {
          lastRequestedIndex = Math.max(-1, messageCount - 20);
        }
        CPAction action = service.getCPAction("GetMessage");
        if (action != null)
        {
          try
          {
            action.getArgument("Index").setNumericValue(lastRequestedIndex + 1);
            controlPoint.invokeAction(action);

            String name = action.getArgument("Name").getStringValue();
            String message = action.getArgument("Message").getStringValue();

            lastRequestedIndex++;
            jTextArea.setText((jTextArea.getText().length() > 0 ? jTextArea.getText() + "\n" : "") + name + ": " +
              message);
          } catch (ActionFailedException afe)
          {
            System.out.println("An error occured:" + afe.getMessage());
          } catch (Exception ex)
          {
            System.out.println("An error occured:" + ex.getMessage());
          }
        }
      }
      ThreadHelper.sleep(200);
    }
    terminated = true;
  }

  /*
   * (non-Javadoc)
   * 
   * @see de.fhg.fokus.magic.upnp.control_point.plugins.BasePlugin#terminate()
   */
  public void terminate()
  {
    terminateThread = true;
    while (!terminated)
    {
      try
      {
        Thread.sleep(50);
      } catch (Exception ex)
      {
      }
    }
    super.terminate();
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel     jDividerPanel;

  private javax.swing.JTextField jEnterTextField;

  private javax.swing.JLabel     jLabel1;

  private javax.swing.JTextField jNameTextField;

  private javax.swing.JTextArea  jTextArea;
  // End of variables declaration//GEN-END:variables

}
