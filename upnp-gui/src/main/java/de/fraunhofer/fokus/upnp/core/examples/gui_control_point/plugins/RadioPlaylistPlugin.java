/**
* 
* Copyright (C) 2004-2008 FhG Fokus
*
* This file is part of the FhG Fokus UPnP stack - an open source UPnP implementation
* with some additional features
*
* You can redistribute the FhG Fokus UPnP stack and/or modify it
* under the terms of the GNU General Public License Version 3 as published by
* the Free Software Foundation.
*
* For a license to use the FhG Fokus UPnP stack software under conditions
* other than those described here, or to purchase support for this
* software, please contact Fraunhofer FOKUS by e-mail at the following
* addresses:
*   upnpstack@fokus.fraunhofer.de
*
* The FhG Fokus UPnP stack is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, see <http://www.gnu.org/licenses/>
* or write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
*
*/
package de.fraunhofer.fokus.upnp.core.examples.gui_control_point.plugins;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.text.SimpleDateFormat;
import java.util.Vector;

import javax.swing.JPanel;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;

import de.fraunhofer.fokus.upnp.core.DeviceConstant;
import de.fraunhofer.fokus.upnp.core.control_point.CPAction;
import de.fraunhofer.fokus.upnp.core.control_point.CPStateVariable;
import de.fraunhofer.fokus.upnp.core.examples.playlist.PlaylistEntry;
import de.fraunhofer.fokus.upnp.util.SAXTemplateHandler;
import de.fraunhofer.fokus.upnp.util.ThreadHelper;
import de.fraunhofer.fokus.upnp.util.exceptions.ActionFailedException;
import de.fraunhofer.fokus.upnp.util.swing.ButtonConstants;
import de.fraunhofer.fokus.upnp.util.swing.SmoothButton;

/**
 * This plugin is used for Weather services.
 * 
 * @author Alexander Koenig, Sebastian Nauck
 */

public class RadioPlaylistPlugin extends BaseCPServicePlugin
{

  private static final long serialVersionUID   = 1L;

  public static String      PLUGIN_TYPE        = DeviceConstant.RADIO_PLAYLIST_SERVICE_TYPE;

  private SmoothButton      currentSongButton;

  private Vector            buttonList         = new Vector();

  private JPanel            contentPanel;

  private long              lastPlaylistUpdate = 0;

  private boolean           terminateThread    = false;

  private boolean           terminated         = false;

  /*
   * (non-Javadoc)
   * 
   * @see de.fhg.fokus.magic.upnp.examples.gui_control_point.plugins.BasePlugin#initPluginComponents()
   */
  public void initPluginComponents()
  {
    super.initPluginComponents();
    initComponents();

    setBackground(ButtonConstants.BACKGROUND_COLOR);
    contentPanel = new JPanel();
    contentPanel.setBackground(ButtonConstants.BACKGROUND_COLOR);

    currentSongButton = new SmoothButton(new Dimension(450, 2 * ButtonConstants.BUTTON_HEIGHT), 16, "Lese...", null);
    currentSongButton.setSelectable(false);
    currentSongButton.setDisabledButtonColor(currentSongButton.getButtonColor());

    for (int i = 0; i < 10; i++)
    {
      SmoothButton button = new SmoothButton(new Dimension(450, ButtonConstants.BUTTON_HEIGHT), 12, "", null);
      button.setSelectable(false);
      button.setCenteredText(false);
      button.setDisabledButtonColor(button.getButtonColor());
      buttonList.add(button);
    }

    // initialize panel layout
    updateLayout();
  }

  /** This method starts the plugin as soon as all needed information is available */
  public void startPlugin()
  {
    super.startPlugin();

    try
    {
      currentSongButton.setText(service.getCPStateVariable("CurrentArtist") + " - " +
        service.getCPStateVariable("CurrentTitle"));
    } catch (Exception ex)
    {
      System.out.println("An error occured:" + ex.getMessage());
    }

    Thread thread = new Thread(this);
    thread.setName("RadioPlaylistPlugin");
    thread.start();
  }

  /** Retrieves the type of the plugin */
  public String getPluginType()
  {
    return PLUGIN_TYPE;
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  private void initComponents()// GEN-BEGIN:initComponents
  {
    setLayout(new java.awt.GridBagLayout());

    setBackground(new java.awt.Color(204, 204, 255));

  }// GEN-END:initComponents

  /** Updates the playlist */
  private void updatePlaylist()
  {
    lastPlaylistUpdate = System.currentTimeMillis();
    CPAction action = service.getCPAction("GetPlaylist");
    if (action != null)
    {
      try
      {
        controlPoint.invokeAction(action);

        String result = action.getArgument("Playlist").getStringValue();

        // replace simple & with &amp;
        result = result.replaceAll("&", "&amp;");

        PlaylistParser parser = new PlaylistParser();
        parser.parse(result);

        for (int i = 1; i < parser.getEntryList().size(); i++)
        {
          PlaylistEntry currentEntry = (PlaylistEntry)parser.getEntryList().elementAt(i);
          String text =
            new SimpleDateFormat("HH:mm:ss").format(currentEntry.getTime()) + ": " + currentEntry.getArtist() + " - " +
              currentEntry.getTitle();

          if (i - 1 < buttonList.size())
          {
            ((SmoothButton)buttonList.elementAt(i - 1)).setText(text);
          }
        }
      } catch (ActionFailedException afe)
      {
        System.out.println("An error occured:" + afe.getMessage());
      } catch (Exception ex)
      {
        System.out.println("An error occured:" + ex.getMessage());
      }
    }
  }

  public void stateVariableChanged(CPStateVariable csv)
  {
    if (service.getCPStateVariable("CurrentArtist") == csv || service.getCPStateVariable("CurrentTitle") == csv)
    {
      // set value
      try
      {
        currentSongButton.setText(service.getCPStateVariable("CurrentArtist") + " - " +
          service.getCPStateVariable("CurrentTitle"));
      } catch (Exception ex)
      {
      }
      // request playlist immediately
      updatePlaylist();
    }
  }

  /** Redraws the layout of the plugin */
  private void updateLayout()
  {
    removeAll();

    GridBagConstraints gridBagConstraints;
    contentPanel.setLayout(new java.awt.GridBagLayout());

    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.fill = GridBagConstraints.BOTH;
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.insets = new Insets(2, 5, 2, 5);
    contentPanel.add(currentSongButton, gridBagConstraints);

    for (int i = 0; i < buttonList.size(); i++)
    {
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = i + 1;
      gridBagConstraints.gridwidth = 1;
      contentPanel.add((SmoothButton)buttonList.elementAt(i), gridBagConstraints);
    }
    buildCenteredLayout(contentPanel);

    repaint();
    validateTree();
  }

  /** Collect all notes from note service */
  public void run()
  {
    while (!terminateThread)
    {
      if (System.currentTimeMillis() - lastPlaylistUpdate > 120000)
      {
        updatePlaylist();
      }
      ThreadHelper.sleep(200);
    }
    terminated = true;
  }

  public void terminate()
  {
    terminateThread = true;
    while (!terminated)
    {
      ThreadHelper.sleep(50);
    }
    super.terminate();
  }

  // ////////////////////////////////////////////////////////////////////////////////////////////////
  // //
  // //
  // Private classes //
  // //
  // //
  // ////////////////////////////////////////////////////////////////////////////////////////////////
  /** This class is responsible for parsing the BVG item XML description */
  private class PlaylistParser extends SAXTemplateHandler
  {

    private Vector entryList = new Vector();

    public String  artist;

    public String  title;

    public String  time;

    /*
     * (non-Javadoc)
     * 
     * @see de.fhg.fokus.magic.upnp.xml.SAXTemplateHandler#processStartElement(java.lang.String,
     *      java.lang.String, java.lang.String, org.xml.sax.Attributes)
     */
    public void processStartElement(String uri, String name, String qName, Attributes atts) throws SAXException
    {
      if (getTagCount() == 2 && getCurrentTag().equalsIgnoreCase("Entry"))
      {
        artist = "";
        title = "";
        time = "";
      }
    }

    /*
     * (non-Javadoc)
     * 
     * @see de.fhg.fokus.magic.upnp.xml.SAXTemplateHandler#processEndElement(java.lang.String,
     *      java.lang.String, java.lang.String)
     */
    public void processEndElement(String uri, String localName, String qName) throws SAXException
    {
      if (getTagCount() == 2 && getCurrentTag().equalsIgnoreCase("Entry"))
      {
        if (artist.length() > 0 && title.length() > 0 && time.length() > 0)
        {
          entryList.add(new PlaylistEntry(time, artist, title));
        }
      }
    }

    /*
     * (non-Javadoc)
     * 
     * @see de.fhg.fokus.magic.upnp.xml.SAXTemplateHandler#processContentElement(java.lang.String)
     */
    public void processContentElement(String content)
    {
      if (getTagCount() == 3 && getCurrentTag().equalsIgnoreCase("Artist"))
      {
        artist = content;
      }

      if (getTagCount() == 3 && getCurrentTag().equalsIgnoreCase("Title"))
      {
        title = content;
      }

      if (getTagCount() == 3 && getCurrentTag().equalsIgnoreCase("Time"))
      {
        time = content;
      }
    }

    /**
     * Retrieves the entryList.
     * 
     * @return The entryList
     */
    public Vector getEntryList()
    {
      return entryList;
    }

  }

}
